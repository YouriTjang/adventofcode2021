import unittest
from collections import Counter
from parameterized import parameterized


def simulate(data, days):
    counter = Counter(data)
    return simulate_counter(counter, days)


def simulate_counter(counter, days):
    for n in range(days):
        zeros = counter.get(0, 0)
        for i in range(0, 9):
            counter[i] = counter.get(i + 1, 0)
        counter = counter + Counter({6: zeros, 8: zeros})
    return counter


def sorted_counter(counter: Counter):
    p = ""
    for s in sorted(counter.keys()):
        p += f"{s}:{counter[s]}, "
    return p


class MyTestCase(unittest.TestCase):
    @parameterized.expand([
        ["day 1", [3, 4, 3, 1, 2], [2, 3, 2, 0, 1]],
        ["day 2", [2, 3, 2, 0, 1], [1, 2, 1, 6, 0, 8]],
        ["day 3", [1, 2, 1, 6, 0, 8], [0, 1, 0, 5, 6, 7, 8]],
        ["day 4", [0, 1, 0, 5, 6, 7, 8], [6, 0, 6, 4, 5, 6, 7, 8, 8]],
        ["day 5", [6, 0, 6, 4, 5, 6, 7, 8, 8], [5, 6, 5, 3, 4, 5, 6, 7, 7, 8]],
        ["day 6", [5, 6, 5, 3, 4, 5, 6, 7, 7, 8], [4, 5, 4, 2, 3, 4, 5, 6, 6, 7]],
        ["day 7", [4, 5, 4, 2, 3, 4, 5, 6, 6, 7], [3, 4, 3, 1, 2, 3, 4, 5, 5, 6]],
        ["day 8", [3, 4, 3, 1, 2, 3, 4, 5, 5, 6], [2, 3, 2, 0, 1, 2, 3, 4, 4, 5]],
        ["day 9", [2, 3, 2, 0, 1, 2, 3, 4, 4, 5], [1, 2, 1, 6, 0, 1, 2, 3, 3, 4, 8]],
        ["day 10", [1, 2, 1, 6, 0, 1, 2, 3, 3, 4, 8], [0, 1, 0, 5, 6, 0, 1, 2, 2, 3, 7, 8]],
        ["day 11", [0, 1, 0, 5, 6, 0, 1, 2, 2, 3, 7, 8], [6, 0, 6, 4, 5, 6, 0, 1, 1, 2, 6, 7, 8, 8, 8]],
        ["day 12", [6, 0, 6, 4, 5, 6, 0, 1, 1, 2, 6, 7, 8, 8, 8], [5, 6, 5, 3, 4, 5, 6, 0, 0, 1, 5, 6, 7, 7, 7, 8, 8]],
        ["day 13", [5, 6, 5, 3, 4, 5, 6, 0, 0, 1, 5, 6, 7, 7, 7, 8, 8], [4, 5, 4, 2, 3, 4, 5, 6, 6, 0, 4, 5, 6, 6, 6, 7, 7, 8, 8]],
        ["day 14", [4, 5, 4, 2, 3, 4, 5, 6, 6, 0, 4, 5, 6, 6, 6, 7, 7, 8, 8], [3, 4, 3, 1, 2, 3, 4, 5, 5, 6, 3, 4, 5, 5, 5, 6, 6, 7, 7, 8]],
        ["day 15", [3, 4, 3, 1, 2, 3, 4, 5, 5, 6, 3, 4, 5, 5, 5, 6, 6, 7, 7, 8], [2, 3, 2, 0, 1, 2, 3, 4, 4, 5, 2, 3, 4, 4, 4, 5, 5, 6, 6, 7]],
        ["day 16", [2, 3, 2, 0, 1, 2, 3, 4, 4, 5, 2, 3, 4, 4, 4, 5, 5, 6, 6, 7], [1, 2, 1, 6, 0, 1, 2, 3, 3, 4, 1, 2, 3, 3, 3, 4, 4, 5, 5, 6, 8]],
        ["day 17", [1, 2, 1, 6, 0, 1, 2, 3, 3, 4, 1, 2, 3, 3, 3, 4, 4, 5, 5, 6, 8], [0, 1, 0, 5, 6, 0, 1, 2, 2, 3, 0, 1, 2, 2, 2, 3, 3, 4, 4, 5, 7, 8]],
        ["day 18", [0, 1, 0, 5, 6, 0, 1, 2, 2, 3, 0, 1, 2, 2, 2, 3, 3, 4, 4, 5, 7, 8], [6, 0, 6, 4, 5, 6, 0, 1, 1, 2, 6, 0, 1, 1, 1, 2, 2, 3, 3, 4, 6, 7, 8, 8, 8, 8]],
    ])
    def test_print_example_as_counter(self, name, data, expected):
        self.assertEqual(sorted_counter(Counter(expected)),
                         sorted_counter(simulate(data, 1)))

    def test_example_18_days(self):
        self.assertEqual(sorted_counter(Counter([6, 0, 6, 4, 5, 6, 0, 1, 1, 2, 6, 0, 1, 1, 1, 2, 2, 3, 3, 4, 6, 7, 8, 8, 8, 8])),
                         sorted_counter(simulate([3, 4, 3, 1, 2], 18)))

    def test_counter_sum(self):
        self.assertEqual(5934, sum(simulate([3, 4, 3, 1, 2], 80).values()))

    def test_puzzel_input(self):
        print(sum(simulate(puzzel_input, 256).values()))


if __name__ == '__main__':
    unittest.main()


puzzel_input = [4, 1, 1, 1, 5, 1, 3, 1, 5, 3, 4, 3, 3, 1, 3, 3, 1, 5, 3, 2, 4,
                4, 3, 4, 1, 4, 2, 2, 1, 3, 5, 1, 1, 3, 2, 5, 1, 1, 4, 2, 5, 4,
                3, 2, 5, 3, 3, 4, 5, 4, 3, 5, 4, 2, 5, 5, 2, 2, 2, 3, 5, 5, 4,
                2, 1, 1, 5, 1, 4, 3, 2, 2, 1, 2, 1, 5, 3, 3, 3, 5, 1, 5, 4, 2,
                2, 2, 1, 4, 2, 5, 2, 3, 3, 2, 3, 4, 4, 1, 4, 4, 3, 1, 1, 1, 1,
                1, 4, 4, 5, 4, 2, 5, 1, 5, 4, 4, 5, 2, 3, 5, 4, 1, 4, 5, 2, 1,
                1, 2, 5, 4, 5, 5, 1, 1, 1, 1, 1, 4, 5, 3, 1, 3, 4, 3, 3, 1, 5,
                4, 2, 1, 4, 4, 4, 1, 1, 3, 1, 3, 5, 3, 1, 4, 5, 3, 5, 1, 1, 2,
                2, 4, 4, 1, 4, 1, 3, 1, 1, 3, 1, 3, 3, 5, 4, 2, 1, 1, 2, 1, 2,
                3, 3, 5, 4, 1, 1, 2, 1, 2, 5, 3, 1, 5, 4, 3, 1, 5, 2, 3, 4, 4,
                3, 1, 1, 1, 2, 1, 1, 2, 1, 5, 4, 2, 2, 1, 4, 3, 1, 1, 1, 1, 3,
                1, 5, 2, 4, 1, 3, 2, 3, 4, 3, 4, 2, 1, 2, 1, 2, 4, 2, 1, 5, 2,
                2, 5, 5, 1, 1, 2, 3, 1, 1, 1, 3, 5, 1, 3, 5, 1, 3, 3, 2, 4, 5,
                5, 3, 1, 4, 1, 5, 2, 4, 5, 5, 5, 2, 4, 2, 2, 5, 2, 4, 1, 3, 2,
                1, 1, 4, 4, 1, 5]